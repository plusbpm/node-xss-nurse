// Generated by CoffeeScript 1.3.3
(function() {
  var defaults, http, querystring, sendRequest, stored_key, stored_policy;

  http = require("http");

  querystring = require('querystring');

  defaults = {
    host: "api.xssnurse.com",
    port: 80,
    path: "",
    method: "GET"
  };

  stored_key = "test_key";

  stored_policy = "default";

  module.exports = {
    setup: function(key, policy) {
      if (policy == null) {
        policy = "default";
      }
      stored_policy = policy;
      return stored_key = key;
    },
    sanitize: function(val, cbk) {
      var dataStringed, info, isString;
      info = {};
      isString = typeof val === "string";
      info.options = {
        key: stored_key
      };
      if (isString) {
        info = {
          method: "GET",
          options: {
            val: val
          }
        };
      } else {
        dataStringed = JSON.stringify(val);
        info = {
          data: dataStringed,
          method: "POST",
          headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(dataStringed, 'utf8')
          }
        };
      }
      return sendRequest(info, function(err, r) {
        if (err != null) {
          return cbk(err, null);
        }
        if (isString) {
          return cbk(null, r);
        } else {
          return cbk(null, JSON.parse(r));
        }
      });
    }
  };

  sendRequest = function(info, cbk) {
    var key, reqOptions, request, value, _ref;
    reqOptions = {
      host: info.host || defaults.host,
      port: info.port || defaults.port,
      path: info.path || defaults.path,
      method: info.method || defaults.method
    };
    if (info.options != null) {
      reqOptions.path += "?" + querystring.stringify(info.options);
    }
    request = http.request(reqOptions);
    request.on('error', function(err) {
      if (cbk != null) {
        return cbk(err, null);
      }
    });
    request.on('response', function(resp) {
      var body;
      body = "";
      resp.on('data', function(chunk) {
        return body += chunk;
      });
      resp.on('end', function() {
        if (cbk != null) {
          return cbk(null, body);
        }
      });
      return resp.on('error', function(err) {
        if (cbk != null) {
          return cbk(err, null);
        }
      });
    });
    _ref = info.headers != null;
    for (key in _ref) {
      value = _ref[key];
      request.setHeader(key, value);
    }
    return request.end(info.data);
  };

}).call(this);
